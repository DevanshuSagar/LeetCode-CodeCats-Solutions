class Solution {
public:
    void merge(int l, int m, int r, vector<int> &t, vector<int> &nums) {
        int i = l, j = m+1, k = l;
        while(i<=m && j<=r) {
            if (nums[i] <= nums[j]) {
                t[k++] = nums[i++];
            } else {
                t[k++] = nums[j++];
            }
        }
        while(i<=m) {
            t[k++] = nums[i++];
        }
        while(j<=r) {
            t[k++] = nums[j++];
        }
        for (int x=l;x<=r;x++) {
            nums[x] = t[x];
        }
    }
    void mergeSort(int l, int r, vector<int> &t, vector<int> &nums) {
        if (l>=r) 
            return;
        int mid = l+(r-l)/2;
        mergeSort(l, mid, t, nums);
        mergeSort(mid+1, r, t, nums);
        merge(l, mid, r, t, nums);
    }
    vector<int> sortArray(vector<int>& nums) {
        vector<int> t = nums;
        mergeSort(0, nums.size()-1, t, nums);
        return nums;
    }
};